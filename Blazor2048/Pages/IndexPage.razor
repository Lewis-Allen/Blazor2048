@page "/"
@inject IGameStateService State

<div id="background" class="jumbotron m-0 p-0" @onkeydown="@KeyDownAsync" tabindex="0" @ref="GameDiv">
    @if (State.IsInitialized)
    {
        <div id="main-container" class="d-flex flex-column">
            <div class="d-flex flex-row justify-content-center">
                <h1 class="game-over">@(State.GameOver ? " Game Over" : "")</h1>
            </div>
            <div class="d-flex flex-row justify-content-center">
                <h1>Score: @State.Score</h1>
            </div>
            <div class="d-flex flex-row justify-content-center">
                <h1>High-Score: @State.HighScore</h1>
            </div>
            <table @ontouchstart="HandleTouchStart" @ontouchend="HandleTouchEndAsync">
                @foreach (var row in State.GetRows())
                {
                    <tr>
                        @foreach (var tile in row)
                        {
                            <Tile Value=tile.Value
                                  AnimationFactor=tile.AnimationFactor
                                  NewTile=tile.NewTile
                                  Merged=tile.Merged
                                  CurrentMove=CurrentMove />
                        }
                    </tr>
                }
            </table>
            <div class="d-flex flex-row justify-content-center">
                <button class="btn btn-primary reset" @onclick="ResetAsync">Reset</button>
            </div>
        </div>
    }
    else
    {
        <div class="spinner"></div>
    }
</div>



@code {

    public GameMove? CurrentMove { get; set; } = null;
    protected ElementReference GameDiv;

    protected async override Task OnInitializedAsync()
    {
        await State.InitializeAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetFocusAsync();
    }

    (TouchPoint ReferencePoint, DateTime StartTime) startPoint;

    protected void HandleTouchStart(TouchEventArgs t)
    {
        startPoint.ReferencePoint = t.TargetTouches[0];
        startPoint.StartTime = DateTime.Now;
    }

    protected async Task HandleTouchEndAsync(TouchEventArgs t)
    {
        const double swipeThreshold = 0.8;
        try
        {
            if (startPoint.ReferencePoint == null)
            {
                return;
            }

            var endReferencePoint = t.ChangedTouches[0];

            var diffX = startPoint.ReferencePoint.ClientX - endReferencePoint.ClientX;
            var diffY = startPoint.ReferencePoint.ClientY - endReferencePoint.ClientY;
            var diffTime = DateTime.Now - startPoint.StartTime;
            var velocityX = Math.Abs(diffX / diffTime.Milliseconds);
            var velocityY = Math.Abs(diffY / diffTime.Milliseconds);

            if (velocityX < swipeThreshold && velocityY < swipeThreshold) return;
            if (Math.Abs(velocityX - velocityY) < .5) return;
            if (State.IsMoving) return;

            if (velocityX >= swipeThreshold)
            {
                CurrentMove = diffX < 0 ? GameMove.RIGHT : GameMove.LEFT;
                await State.MoveAsync(CurrentMove.Value);
                CurrentMove = null;
            }
            if (velocityY >= swipeThreshold)
            {
                CurrentMove = diffY < 0 ? GameMove.DOWN : GameMove.UP;
                await State.MoveAsync(CurrentMove.Value);
                CurrentMove = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Gesture failed: Message - {ex.Message}");
        }
    }

    protected async Task SetFocusAsync()
    {
        await GameDiv.FocusAsync();
    }

    protected async Task KeyDownAsync(KeyboardEventArgs args)
    {
        if (State.IsMoving)
            return;

        CurrentMove = args.Key switch
        {
            "ArrowUp" => GameMove.UP,
            "ArrowRight" => GameMove.RIGHT,
            "ArrowDown" => GameMove.DOWN,
            "ArrowLeft" => GameMove.LEFT,
            _ => null
        };

        if (CurrentMove.HasValue)
        {
            await State.MoveAsync(CurrentMove.Value);
            CurrentMove = null;
        }
    }

    public async Task ResetAsync()
    {
        await State.ResetBoardAsync();
        await SetFocusAsync();
    }
}
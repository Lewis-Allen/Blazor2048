@page "/"
@inject IJSRuntime JSRuntime

<div class="jumbotron" @onkeydown="@KeyDown" tabindex="0" @ref="GameDiv" @onfocusout="SetFocus">
    <h1 class="display-4">Score: @State.GetScore()</h1>
    <h1 class="display-4">High-Score: @State.GetHighScore()</h1>
    <h1 class="display-4">@(State.GetGameOverStatus() ? "Game Over" : "")</h1>
    <table>
        @if (State.IsMoving())
        {
            @for (var y = 0; y < State.GetPreMoveRows().Length; y++)
            {
                <tr>
                    @for (var x = 0; x < State.GetPreMoveRows()[y].Length; x++)
                    {
                        <td class="tile-blank">
                            @if (State.GetPreMoveRows()[y][x].Value > 0)
                            {
                                <div class="tile @GetColourClass(State.GetPreMoveRows()[y][x].Value) @(GetCurrentMoveAnimationClassName() + State.GetRows()[y][x].AnimationFactor)">
                                    @GetDisplayString(State.GetPreMoveRows()[y][x].Value)
                                </div>
                            }
                            else
                            {
                                <div class="tile @GetColourClass(0)"></div>
                            }
                        </td>
                    }

                </tr>
            }
        }
        else
        {
            @for (var y = 0; y < State.GetRows().Length; y++)
            {
                <tr>
                    @for (var x = 0; x < State.GetRows()[y].Length; x++)
                    {
                        <td class="tile-blank">
                            @if (State.GetPostGenerateRows()[y][x].Value > State.GetPostMoveRows()[y][x].Value)
                            {
                                <div class="tile @GetColourClass(State.GetRows()[y][x].Value) @(State.GetRows()[y][x].NewTile ? "new-tile" : "")">@GetDisplayString(State.GetRows()[y][x].Value)</div>
                            }
                            else if (State.GetRows()[y][x].Value > 0)
                            {
                                <div class="tile @GetColourClass(State.GetRows()[y][x].Value)">@GetDisplayString(State.GetRows()[y][x].Value)</div>
                            }
                            else
                            {
                                <div class="tile @GetColourClass(0)"></div>
                            }
                        </td>
                    }

                </tr>
            }
        }
    </table>
</div>

<button class="btn btn-primary" @onclick="Reset">Reset</button>

@code {

    GameState State = new GameState();

    public GameMove? CurrentMove { get; set; } = null;

    protected ElementReference GameDiv;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await SetFocus();
    }

    protected async Task SetFocus()
    {
        await JSRuntime.InvokeVoidAsync("SetFocusToElement", GameDiv);
    }

    protected async Task KeyDown(KeyboardEventArgs args)
    {
        if (State.IsMoving())
            return;

        CurrentMove = args.Key switch {
            "ArrowUp" => GameMove.UP,
            "ArrowRight" => GameMove.RIGHT,
            "ArrowDown" => GameMove.DOWN,
            "ArrowLeft" => GameMove.LEFT,
            _ => null
        };

        if (CurrentMove.HasValue)
        {
            await State.Move(CurrentMove.Value);
            CurrentMove = null;
        }
    }

    public void Reset()
    {
        State.ResetGame();
        JSRuntime.InvokeVoidAsync("SetFocusToElement", GameDiv);
    }

    public string GetColourClass(int value)
        => value switch
        {
            2 => "tile-yellow",
            4 => "tile-pink",
            8 => "tile-blue",
            16 => "tile-orange",
            32 => "tile-red",
            64 => "tile-purple",
            128 => "tile-black",
            256 => "tile-turquoise",
            512 => "tile-oranger",
            1024 => "tile-green",
            2048 => "tile-bright-pink",
            _ => "tile-blank"
        };

    public string GetDisplayString(int value)
        => value == 0 ? "" : value.ToString();

    public string GetCurrentMoveAnimationClassName()
        => CurrentMove switch
        {
            GameMove.UP => "slide-Y",
            GameMove.RIGHT => "slideX",
            GameMove.DOWN => "slideY",
            GameMove.LEFT => "slide-X",
            _ => ""
        };
}
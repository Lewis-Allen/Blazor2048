@page "/"
@inject IJSRuntime JSRuntime


<div class="jumbotron" @onkeydown="@KeyDown" tabindex="0" @ref="GameDiv">
    <h1 class="display-4">Score: @state.GetScore()</h1>
    <h1 class="display-4">@(state.GetGameOverStatus() ? "Game Over" : "")</h1>
    <table>
        @foreach (Tile[] row in state.GetRows())
        {
            <tr>
                @foreach (Tile tile in row)
                {
                    <td class="@GetColourClass(tile.Value)">@(tile.Value == 0 ? "" : tile.Value.ToString())</td>
                }
            </tr>
        }
    </table>
</div>

<button class="btn btn-primary" @onclick="Reset">Reset</button>

@code {

    GameState state = new GameState();

    protected ElementReference GameDiv;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("SetFocusToElement", GameDiv);
        }
    }

    protected void KeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "ArrowUp":
                state.Move(GameMove.UP);
                break;
            case "ArrowRight":
                state.Move(GameMove.RIGHT);
                break;
            case "ArrowDown":
                state.Move(GameMove.DOWN);
                break;
            case "ArrowLeft":
                state.Move(GameMove.LEFT);
                break;
        }
    }

    public void Reset()
    {
        state.ResetGame();
    }

    public string GetColourClass(int value)
    {
        return value switch
        {
            2 => "tile-yellow",
            4 => "tile-pink",
            8 => "tile-blue",
            16 => "tile-orange",
            32 => "tile-red",
            64 => "tile-purple",
            128 => "tile-black",
            256 => "tile-turquoise",
            512 => "tile-orange",
            1024 => "tile-green",
            2048 => "tile-bright-pink",
            _ => "tile-blank"
        };
    }
}
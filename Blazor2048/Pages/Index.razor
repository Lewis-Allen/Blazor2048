@page "/"
@inject IJSRuntime JSRuntime

<div class="jumbotron" @onkeydown="@KeyDown" tabindex="0" @ref="GameDiv" @onfocusout="SetFocus">
    <h1 class="display-4">Score: @state.GetScore()</h1>
    <h1 class="display-4">High-Score: @state.GetHighScore()</h1>
    <h1 class="display-4">@(state.GetGameOverStatus() ? "Game Over" : "")</h1>
    <table>
        @if (state.IsMoving())
        {
            @for (var i = 0; i < state.GetPreMoveRows().Length; i++)
            {
                <tr>
                    @for (var j = 0; j < state.GetPreMoveRows()[i].Length; j++)
                    {
                        <td>
                            @if (state.GetPreMoveRows()[j][i].Value > 0)
                            {
                                <div class="tile @GetColourClass(state.GetPreMoveRows()[j][i].Value) @(GetCurrentMoveAnimationClassName() + state.GetRows()[i][j].AnimationFactor)">@(state.GetPreMoveRows()[j][i].Value == 0 ? "" : state.GetPreMoveRows()[j][i].Value.ToString())</div>
                            }
                            else
                            {
                                <div class="tile @GetColourClass(0)"></div>
                            }
                        </td>
                    }

                </tr>
            }
        }
        else
        {
            @for (var i = 0; i < state.GetRows().Length; i++)
            {
                <tr>
                    @for (var j = 0; j < state.GetRows()[i].Length; j++)
                    {
                        <td>
                            @if (state.GetPostGenerateRows()[j][i].Value > state.GetPostMoveRows()[j][i].Value)
                            {
                                <div class="tile @GetColourClass(state.GetRows()[i][j].Value) @(state.NewTileFlip() ? "new-tile" : "new-tile2")">@(state.GetRows()[i][j].Value == 0 ? "" : state.GetRows()[i][j].Value.ToString())</div>
                            }
                            else if (state.GetRows()[i][j].Value > 0)
                            {
                                <div class="tile @GetColourClass(state.GetRows()[i][j].Value)">@(state.GetRows()[i][j].Value == 0 ? "" : state.GetRows()[i][j].Value.ToString())</div>
                            }
                            else
                            {
                                <div class="tile @GetColourClass(0)"></div>
                            }
                        </td>
                    }

                </tr>
            }
        }
    </table>
</div>

<button class="btn btn-primary" @onclick="Reset">Reset</button>

@code {

    GameState state = new GameState();

    public int CurrentMove { get; set; } = 100;

    protected ElementReference GameDiv;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetFocus();
        }
    }

    protected async Task SetFocus()
    {
        await JSRuntime.InvokeVoidAsync("SetFocusToElement", GameDiv);
    }

    protected async Task KeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "ArrowUp":
                CurrentMove = 0;
                await state.Move(GameMove.UP);
                CurrentMove = 100;
                break;
            case "ArrowRight":
                CurrentMove = 1;
                await state.Move(GameMove.RIGHT);
                CurrentMove = 100;
                break;
            case "ArrowDown":
                CurrentMove = 2;
                await state.Move(GameMove.DOWN);
                CurrentMove = 100;
                break;
            case "ArrowLeft":
                CurrentMove = 3;
                await state.Move(GameMove.LEFT);
                CurrentMove = 100;
                break;
        }
    }

    public void Reset()
    {
        state.ResetGame();
        JSRuntime.InvokeVoidAsync("SetFocusToElement", GameDiv);
    }

    public string GetColourClass(int value)
    {
        return value switch
        {
            2 => "tile-yellow",
            4 => "tile-pink",
            8 => "tile-blue",
            16 => "tile-orange",
            32 => "tile-red",
            64 => "tile-purple",
            128 => "tile-black",
            256 => "tile-turquoise",
            512 => "tile-oranger",
            1024 => "tile-green",
            2048 => "tile-bright-pink",
            _ => "tile-blank"
        };
    }

    public string GetCurrentMoveAnimationClassName() => CurrentMove switch
    {
        0 => "slide-Y",
        1 => "slideX",
        2 => "slideY",
        3 => "slide-X",
        _ => ""
    };
}